/* Auto-generated by genmsg_cpp for file /home/chihyi/fuerte_workspace/find_present_in_room/msg/Tag.msg */
#ifndef FIND_PRESENT_IN_ROOM_MESSAGE_TAG_H
#define FIND_PRESENT_IN_ROOM_MESSAGE_TAG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace find_present_in_room
{
template <class ContainerAllocator>
struct Tag_ {
  typedef Tag_<ContainerAllocator> Type;

  Tag_()
  : id(0)
  , cf(0.0)
  , x(0)
  , y(0)
  , diameter(0.0)
  , distance(0.0)
  , xRot(0.0)
  , yRot(0.0)
  , zRot(0.0)
  , xMetric(0.0)
  , yMetric(0.0)
  , zMetric(0.0)
  , cwCorners()
  {
    cwCorners.assign(0.0);
  }

  Tag_(const ContainerAllocator& _alloc)
  : id(0)
  , cf(0.0)
  , x(0)
  , y(0)
  , diameter(0.0)
  , distance(0.0)
  , xRot(0.0)
  , yRot(0.0)
  , zRot(0.0)
  , xMetric(0.0)
  , yMetric(0.0)
  , zMetric(0.0)
  , cwCorners()
  {
    cwCorners.assign(0.0);
  }

  typedef uint32_t _id_type;
  uint32_t id;

  typedef double _cf_type;
  double cf;

  typedef uint32_t _x_type;
  uint32_t x;

  typedef uint32_t _y_type;
  uint32_t y;

  typedef double _diameter_type;
  double diameter;

  typedef double _distance_type;
  double distance;

  typedef double _xRot_type;
  double xRot;

  typedef double _yRot_type;
  double yRot;

  typedef double _zRot_type;
  double zRot;

  typedef double _xMetric_type;
  double xMetric;

  typedef double _yMetric_type;
  double yMetric;

  typedef double _zMetric_type;
  double zMetric;

  typedef boost::array<double, 8>  _cwCorners_type;
  boost::array<double, 8>  cwCorners;


  typedef boost::shared_ptr< ::find_present_in_room::Tag_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::find_present_in_room::Tag_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Tag
typedef  ::find_present_in_room::Tag_<std::allocator<void> > Tag;

typedef boost::shared_ptr< ::find_present_in_room::Tag> TagPtr;
typedef boost::shared_ptr< ::find_present_in_room::Tag const> TagConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::find_present_in_room::Tag_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::find_present_in_room::Tag_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace find_present_in_room

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::find_present_in_room::Tag_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::find_present_in_room::Tag_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::find_present_in_room::Tag_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8506b66f10a2975d80e32037f36b9ab4";
  }

  static const char* value(const  ::find_present_in_room::Tag_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8506b66f10a2975dULL;
  static const uint64_t static_value2 = 0x80e32037f36b9ab4ULL;
};

template<class ContainerAllocator>
struct DataType< ::find_present_in_room::Tag_<ContainerAllocator> > {
  static const char* value() 
  {
    return "find_present_in_room/Tag";
  }

  static const char* value(const  ::find_present_in_room::Tag_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::find_present_in_room::Tag_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# All screen measurements are in pixels, all spatial measurements are in meters.\n\
# Angles in radians.\n\
uint32 id\n\
# This is a rating of confidence in the tag pattern identification 0 < cf < 1.\n\
float64 cf\n\
uint32 x\n\
uint32 y\n\
# The 'diameter' is the square root of the tag's actual area, as estimated by \n\
# the AR software.  You can use it to check the cf confidence.\n\
float64 diameter\n\
# This is the estimated distance from viewer to the center of the tag.\n\
float64 distance\n\
float64 xRot \n\
float64 yRot \n\
float64 zRot\n\
float64 xMetric\n\
float64 yMetric\n\
float64 zMetric\n\
# Screen coordinates of the four corners.\n\
float64[8] cwCorners\n\
\n\
\n\
";
  }

  static const char* value(const  ::find_present_in_room::Tag_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::find_present_in_room::Tag_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::find_present_in_room::Tag_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
    stream.next(m.cf);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.diameter);
    stream.next(m.distance);
    stream.next(m.xRot);
    stream.next(m.yRot);
    stream.next(m.zRot);
    stream.next(m.xMetric);
    stream.next(m.yMetric);
    stream.next(m.zMetric);
    stream.next(m.cwCorners);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Tag_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::find_present_in_room::Tag_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::find_present_in_room::Tag_<ContainerAllocator> & v) 
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "cf: ";
    Printer<double>::stream(s, indent + "  ", v.cf);
    s << indent << "x: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.y);
    s << indent << "diameter: ";
    Printer<double>::stream(s, indent + "  ", v.diameter);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "xRot: ";
    Printer<double>::stream(s, indent + "  ", v.xRot);
    s << indent << "yRot: ";
    Printer<double>::stream(s, indent + "  ", v.yRot);
    s << indent << "zRot: ";
    Printer<double>::stream(s, indent + "  ", v.zRot);
    s << indent << "xMetric: ";
    Printer<double>::stream(s, indent + "  ", v.xMetric);
    s << indent << "yMetric: ";
    Printer<double>::stream(s, indent + "  ", v.yMetric);
    s << indent << "zMetric: ";
    Printer<double>::stream(s, indent + "  ", v.zMetric);
    s << indent << "cwCorners[]" << std::endl;
    for (size_t i = 0; i < v.cwCorners.size(); ++i)
    {
      s << indent << "  cwCorners[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.cwCorners[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // FIND_PRESENT_IN_ROOM_MESSAGE_TAG_H

